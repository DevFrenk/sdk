"use strict";(self.webpackChunk_myparcelnl_php_sdk_docs=self.webpackChunk_myparcelnl_php_sdk_docs||[]).push([[203],{4085:(e,t,i)=>{i.r(t),i.d(t,{default:()=>s});const n=(0,i(5793).uE)('<h1 id="exceptions" tabindex="-1"><a class="header-anchor" href="#exceptions" aria-hidden="true">#</a> Exceptions</h1><p>MyParcel uses several types of Exceptions to make the errors clear. It is your responsibility to provide the correct status in a response. These are the Exceptions that we currently use.</p><h2 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h2><h3 id="invalidconsignmentexception" tabindex="-1"><a class="header-anchor" href="#invalidconsignmentexception" aria-hidden="true">#</a> InvalidConsignmentException</h3><p>Exception to be returned when an address is incorrect or not usable.</p><p>Class: <code>MyParcelNL\\Sdk\\src\\Exception\\InvalidConsignmentException</code></p><p>HTTP status: 412</p><h3 id="apiexception" tabindex="-1"><a class="header-anchor" href="#apiexception" aria-hidden="true">#</a> ApiException</h3><p>Exception to be returned when a call to MyParcel services has failed.</p><p>Class: <code>MyParcelNL\\Sdk\\src\\Exception\\ApiException</code></p><p>HTTP status: 502</p><h3 id="missingfieldexception" tabindex="-1"><a class="header-anchor" href="#missingfieldexception" aria-hidden="true">#</a> MissingFieldException</h3><p>Exception thrown when there is an attempt to dynamically access a field that does not exist.</p><p>Class: <code>MyParcelNL\\Sdk\\src\\Exception\\MissingFieldException</code></p><p>HTTP status: 500</p><h3 id="invalidargumentexception" tabindex="-1"><a class="header-anchor" href="#invalidargumentexception" aria-hidden="true">#</a> InvalidArgumentException</h3><p>Exception thrown if an argument is not the expected type.</p><p>Class: <code>\\InvalidArgumentException</code></p><p>HTTP status: 500</p><h3 id="badmethodcallexception" tabindex="-1"><a class="header-anchor" href="#badmethodcallexception" aria-hidden="true">#</a> BadMethodCallException</h3><p>Exception thrown if a callback refers to an undefined method or if some arguments are missing.</p><p>Class: <code>\\BadMethodCallException:</code></p><p>HTTP status: 500</p>',23),a={},s=(0,i(3744).Z)(a,[["render",function(e,t){return n}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[i,n]of t)e[i]=n;return e}},7168:(e,t,i)=>{i.r(t),i.d(t,{data:()=>n});const n={key:"v-7fbd6a25",path:"/05.exceptions.html",title:"Exceptions",lang:"en-US",frontmatter:{title:"Exceptions"},excerpt:"",headers:[{level:2,title:"Classes",slug:"classes",children:[{level:3,title:"InvalidConsignmentException",slug:"invalidconsignmentexception",children:[]},{level:3,title:"ApiException",slug:"apiexception",children:[]},{level:3,title:"MissingFieldException",slug:"missingfieldexception",children:[]},{level:3,title:"InvalidArgumentException",slug:"invalidargumentexception",children:[]},{level:3,title:"BadMethodCallException",slug:"badmethodcallexception",children:[]}]}],filePathRelative:"05.exceptions.md",git:{updatedTime:1633685364e3}}}}]);